pr:
  branches:
    include:
      - develop
      - features/*

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'
  dotnetSdkVersion: '8.x'
  dockerRegistryServiceConnection: 'f78f5bed-aa09-4a61-9f5a-bc2a701c3634'
  imageRepository: techchallenge'
  containerRegistry: 'techchallenge.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'

pool:
  name: self-hosted

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK $(dotnetSdkVersion)'
            inputs:
              packageType: sdk
              version: '$(dotnetSdkVersion)'

          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: restore
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: Build Job
            inputs:
              command: 'build'
              arguments: '--no-restore --configuration $(buildConfiguration)'
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: 'test'

          - task: DotNetCoreCLI@2
            displayName: Publish
            inputs:
              command: publish
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
              publishWebProjects: false
              zipAfterPublish: true
          
          - publish: '$(Build.ArtifactStagingDirectory)'
            artifact: drop
          
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
  
  - stage: 'Development'
    displayName: 'Deploy to the development environment'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        environment: development
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - script: |
                    echo O deploy em development foi realizado com sucesso.
                  displayName: 'Deploy to the Development'

  - stage: 'Staging'
    displayName: 'Deploy to the staging environment'
    dependsOn: Development
    condition: succeeded()
    jobs:
      - deployment: Deploy
        environment: staging
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - script: |
                    echo O deploy em staging foi realizado com sucesso.
                  displayName: 'Deploy to the Staging'

  - stage: 'Production'
    displayName: 'Deploy to the production environment'
    dependsOn: Staging
    condition: succeeded()
    jobs:
      - deployment: Deploy
        environment: production
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - script: |
                    echo O deploy em production foi realizado com sucesso.
                  displayName: 'Deploy to the Production'
  